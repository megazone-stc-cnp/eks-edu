---
AWSTemplateFormatVersion: '2010-09-09'
Description: 'Amazon EKS Sample VPC - Private and Public subnets'

Parameters:
  VpcCidrBlock:
    Type: String
    Default: 192.168.0.0/24
    Description: The CIDR range for the VPC. This should be a valid private (RFC 1918) CIDR range.
  VpcCidrBlockForPod:
    Type: String
    Default: 100.64.0.0/22
    Description: The CIDR range for the EKS Pod Subnet. This should be a valid private (RFC 1918) CIDR range.

  PublicSubnet01Block:
    Type: String
    Default: 192.168.0.0/27
    Description: CidrBlock for public subnet 01 within the VPC

  PublicSubnet02Block:
    Type: String
    Default: 192.168.0.32/27
    Description: CidrBlock for public subnet 02 within the VPC

  PrivateSubnet01Block:
    Type: String
    Default: 192.168.0.64/26
    Description: CidrBlock for private subnet 01 within the VPC

  PrivateSubnet02Block:
    Type: String
    Default: 192.168.0.128/26
    Description: CidrBlock for private subnet 02 within the VPC

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: "Worker Network Configuration"
        Parameters:
          - VpcCidrBlock
          - VpcCidrBlockForPod
          - PublicSubnet01Block
          - PublicSubnet02Block
          - PrivateSubnet01Block
          - PrivateSubnet02Block
Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock:  !Ref VpcCidrBlock
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
      - Key: Name
        Value: !Sub '${AWS::StackName}-VPC'

  # https://docs.aws.amazon.com/eks/latest/userguide/cni-custom-network.html 의 다이어그램을 참고하여 Pod 용 CIDR 적용
  VPCAdditionalCidrBlock:
    Type: AWS::EC2::VPCCidrBlock
    Properties:
      VpcId: !Ref VPC
      CidrBlock: !Ref VpcCidrBlockForPod

  InternetGateway:
    Type: "AWS::EC2::InternetGateway"

  VPCGatewayAttachment:
    Type: "AWS::EC2::VPCGatewayAttachment"
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: Public Subnets
      - Key: Network
        Value: Public

  PrivateRouteTable01:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: Private Subnet
      - Key: Network
        Value: Private

  PodRouteTable01:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
      - Key: Name
        Value: Pod Subnet
      - Key: Network
        Value: Pod

  PublicRoute:
    DependsOn: VPCGatewayAttachment
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PrivateRoute01:
    DependsOn:
      - VPCGatewayAttachment
      - NatGateway01
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable01
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway01

  PodRoute01:
    DependsOn:
      - VPCGatewayAttachment
      - NatGateway01
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PodRouteTable01
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway01

  NatGateway01:
    DependsOn:
      - NatGatewayEIP1
      - PublicSubnet01
      - VPCGatewayAttachment
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt 'NatGatewayEIP1.AllocationId'
      SubnetId: !Ref PublicSubnet01
      Tags:
      - Key: Name
        Value: !Sub '${AWS::StackName}-NatGatewayAZ1'

  NatGatewayEIP1:
    DependsOn:
      - VPCGatewayAttachment
    Type: 'AWS::EC2::EIP'
    Properties:
      Domain: vpc

  PublicSubnet01:
    Type: AWS::EC2::Subnet
    Metadata:
      Comment: Public Subnet 1
    Properties:
      MapPublicIpOnLaunch: true
      AvailabilityZone:
        Fn::Select:
        - '0'
        - Fn::GetAZs:
            Ref: AWS::Region
      CidrBlock:
        Ref: PublicSubnet01Block
      VpcId:
        Ref: VPC
      Tags:
      - Key: Name
        Value: !Sub "${AWS::StackName}-PublicSubnet01"
      - Key: kubernetes.io/role/elb
        Value: 1

  PublicSubnet02:
    Type: AWS::EC2::Subnet
    Metadata:
      Comment: Public Subnet 2
    Properties:
      MapPublicIpOnLaunch: true
      AvailabilityZone:
        Fn::Select:
        - '1'
        - Fn::GetAZs:
            Ref: AWS::Region
      CidrBlock:
        Ref: PublicSubnet02Block
      VpcId:
        Ref: VPC
      Tags:
      - Key: Name
        Value: !Sub "${AWS::StackName}-PublicSubnet02"
      - Key: kubernetes.io/role/elb
        Value: 1

  PrivateSubnet01:
    Type: AWS::EC2::Subnet
    Metadata:
      Comment: Private Subnet 1
    Properties:
      AvailabilityZone:
        Fn::Select:
        - '0'
        - Fn::GetAZs:
            Ref: AWS::Region
      CidrBlock:
        Ref: PrivateSubnet01Block
      VpcId:
        Ref: VPC
      Tags:
      - Key: Name
        Value: !Sub "${AWS::StackName}-PrivateSubnet01"
      - Key: kubernetes.io/role/internal-elb
        Value: 1

  PrivateSubnet02:
    Type: AWS::EC2::Subnet
    Metadata:
      Comment: Private Subnet 2
    Properties:
      AvailabilityZone:
        Fn::Select:
        - '1'
        - Fn::GetAZs:
            Ref: AWS::Region
      CidrBlock:
        Ref: PrivateSubnet02Block
      VpcId:
        Ref: VPC
      Tags:
      - Key: Name
        Value: !Sub "${AWS::StackName}-PrivateSubnet02"
      - Key: kubernetes.io/role/internal-elb
        Value: 1

  PodSubnet01:
    DependsOn:
      - VPCAdditionalCidrBlock
    Type: AWS::EC2::Subnet
    Metadata:
      Comment: Pod Subnet 1
    Properties:
      AvailabilityZone:
        Fn::Select:
        - '0'
        - Fn::GetAZs:
            Ref: AWS::Region
      CidrBlock:                          # Pod용 Cidr Block을 2개로 나누어 첫번째 대역을 Pod용 Subnet 2 에 할당
        Fn::Select:
        - 0
        - Fn::Cidr:
          - !Ref VpcCidrBlockForPod
          - 2     # /23 비트 짜리 2개 생성
          - 9     # /23
      VpcId:
        Ref: VPC
      Tags:
      - Key: Name
        Value: !Sub "${AWS::StackName}-PodSubnet01"

  PodSubnet02:
    DependsOn:
      - VPCAdditionalCidrBlock
    Type: AWS::EC2::Subnet
    Metadata:
      Comment: Pod Subnet 2
    Properties:
      AvailabilityZone:
        Fn::Select:
        - '1'
        - Fn::GetAZs:
            Ref: AWS::Region
      CidrBlock:                          # Pod용 Cidr Block을 2개로 나누어 두번째 대역을 Pod용 Subnet 2 에 할당
        Fn::Select:
        - 1
        - Fn::Cidr:
          - !Ref VpcCidrBlockForPod
          - 2     # /23 비트 짜리 2개 생성
          - 9     # /23
      VpcId:
        Ref: VPC
      Tags:
      - Key: Name
        Value: !Sub "${AWS::StackName}-PodSubnet02"

  PublicSubnet01RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet01
      RouteTableId: !Ref PublicRouteTable

  PublicSubnet02RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet02
      RouteTableId: !Ref PublicRouteTable

  PrivateSubnet01RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet01
      RouteTableId: !Ref PrivateRouteTable01

  PrivateSubnet02RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet02
      RouteTableId: !Ref PrivateRouteTable01

  PodSubnet01RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PodSubnet01
      RouteTableId: !Ref PodRouteTable01

  PodSubnet02RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PodSubnet02
      RouteTableId: !Ref PodRouteTable01

  ControlPlaneSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Cluster communication with worker nodes
      VpcId: !Ref VPC

Outputs:
  SubnetIds:
    Description: Subnets IDs in the VPC
    Value: !Join [ ",", [ !Ref PublicSubnet01, !Ref PublicSubnet02, !Ref PrivateSubnet01, !Ref PrivateSubnet02, !Ref PodSubnet01, !Ref PodSubnet02 ] ]
  SecurityGroups:
    Description: Security group for the cluster control plane communication with worker nodes
    Value: !Join [ ",", [ !Ref ControlPlaneSecurityGroup ] ]
  VpcId:
    Description: The VPC Id
    Value: !Ref VPC
  VpcCidr:
    Description: "The CIDR range of the VPC"
    Value: !Ref VpcCidrBlock
  PodCidr:
    Description: "The CIDR range of the Pod"
    Value: !Ref VpcCidrBlockForPod
  PublicSubnet01:
    Description: "Public Subnet1 Id"
    Value: !Ref PublicSubnet01
  PublicSubnet02:
    Description: "Public Subnet2 Id"
    Value: !Ref PublicSubnet02
  PrivateSubnet01:
    Description: "Private Subnet1 Id"
    Value: !Ref PrivateSubnet01
  PrivateSubnet01AZ:
    Description: "The Availability Zone of the Private Subnet1"
    Value: !GetAtt PrivateSubnet01.AvailabilityZone
  PrivateSubnet02:
    Description: "Private Subnet2 Id"
    Value: !Ref PrivateSubnet02
  PrivateSubnet02AZ:
    Description: "The Availability Zone of the Private Subnet2"
    Value: !GetAtt PrivateSubnet02.AvailabilityZone
  PodSubnet01:
    Description: "Pod Subnet1 Id"
    Value: !Ref PodSubnet01
  PodSubnet01Cidr:
    Description: "Pod Subnet1 Id"
    Value: !GetAtt PodSubnet01.CidrBlock
  PodSubnet01AZ:
    Description: "The Availability Zone of the Pod Subnet1"
    Value: !GetAtt PodSubnet01.AvailabilityZone
  PodSubnet02:
    Description: "Pod Subnet2 Id"
    Value: !Ref PodSubnet02
  PodSubnet02Cidr:
    Description: "Pod Subnet2 Id"
    Value: !GetAtt PodSubnet02.CidrBlock
  PodSubnet02AZ:
    Description: "The Availability Zone of the Pod Subnet2"
    Value: !GetAtt PodSubnet02.AvailabilityZone