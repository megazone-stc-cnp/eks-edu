AWSTemplateFormatVersion: "2010-09-09"
Description: Creates a code-server IDE for the EKS workshop
Parameters:
  InstanceVolumeSize:
    Type: Number
    Description: The Size in GB of the code-server Instance Volume.
    Default: 10
  RepositoryOwner:
    Type: String
    Description: The owner of the GitHub repository to be used to bootstrap code-server
    Default: "megazone-stc-cnp"
  RepositoryName:
    Type: String
    Description: The name of the GitHub repository to be used to bootstrap code-server
    Default: "eks-edu"
  RepositoryRef:
    Type: String
    Description: The Git reference to be used to bootstrap code-server
    Default: "main"
  ResourcesPrecreated:
    Type: String
    Description: Whether lab infrastructure has been pre-provisioned
    Default: "false"
    AllowedValues:
      - "false"
      - "true"
  CodeServerInstanceType:
    Type: String
    Description: The instance type to use for code-server
    Default: "t3a.small"    # 't3a.small' 인스턴스는 2 vCPU, 2GB RAM 이고, code-server 최소 사양(2 cpu, 1GB RAM)을 충족함
  CodeServerVersion:
    Type: String
    Description: Default code-server version to use
    Default: "4.99.3"       # 2025-04-18
  AmiParameterStoreName:
    Type: "AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>"
    Default: "/aws/service/ami-amazon-linux-latest/al2023-ami-kernel-6.1-x86_64"

Conditions:
  IsSeoulRegion: !Equals [!Ref "AWS::Region", "ap-northeast-2"]

Mappings:
  PrefixListID:
    ap-northeast-1:
      PrefixList: pl-58a04531
    ap-northeast-2:
      PrefixList: pl-22a6434b
    ap-south-1:
      PrefixList: pl-9aa247f3
    ap-southeast-1:
      PrefixList: pl-31a34658
    ap-southeast-2:
      PrefixList: pl-b8a742d1
    ca-central-1:
      PrefixList: pl-38a64351
    eu-central-1:
      PrefixList: pl-a3a144ca
    eu-north-1:
      PrefixList: pl-fab65393
    eu-west-1:
      PrefixList: pl-4fa04526
    eu-west-2:
      PrefixList: pl-93a247fa
    eu-west-3:
      PrefixList: pl-75b1541c
    sa-east-1:
      PrefixList: pl-5da64334
    us-east-1:
      PrefixList: pl-3b927c52
    us-east-2:
      PrefixList: pl-b6a144df
    us-west-1:
      PrefixList: pl-4ea04527
    us-west-2:
      PrefixList: pl-82a045eb
Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/24
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-vpc
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-igw
  GatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway
  PublicSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 10.0.0.0/24
      VpcId: !Ref VPC
      MapPublicIpOnLaunch: true
      # CloudFront의 VPC Origin 사용을 위한 가용 영역 선택
      # https://docs.aws.amazon.com/ko_kr/AmazonCloudFront/latest/DeveloperGuide/private-content-vpc-origins.html#vpc-origins-supported-regions
      AvailabilityZone: !If
        - IsSeoulRegion
        - !Select [2, !GetAZs '']  # ap-northeast-2 인 경우 az3 선택 
        - !Select [0, !GetAZs '']  # 그 외 지역은 az1 선택
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-public-subnet
  PublicSubnetRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-public-subnet-route-table
  PublicSubnetRoute:
    Type: AWS::EC2::Route
    DependsOn: GatewayAttachment
    Properties:
      RouteTableId: !Ref PublicSubnetRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
  PublicSubnetRouteTableAssoc:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicSubnetRouteTable
      SubnetId: !Ref PublicSubnet
  SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: !Sub ${AWS::StackName}-sg-for-ide
      GroupDescription: SG for IDE
      SecurityGroupIngress:
        - Description: Allow HTTP from CloudFront
          IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          SourcePrefixListId: !FindInMap [PrefixListID, !Ref "AWS::Region", PrefixList]
      SecurityGroupEgress:
        - Description: Allow all outbound traffic
          IpProtocol: -1
          CidrIp: 0.0.0.0/0
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-sg-for-ide
  EksWorkshopIdeLambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${AWS::StackName}-ide-lambda-exec-role
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: "/"
      Policies:
        - PolicyName: !Sub ${AWS::StackName}-LambdaPolicy-${AWS::Region}
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: arn:aws:logs:*:*:*
              - Effect: Allow
                Action:
                  - iam:PassRole
                  - ssm:SendCommand
                  - ssm:GetCommandInvocation
                Resource: "*"
  EksWorkshopIdeBootstrapInstanceLambda:
    Type: Custom::EksWorkshopIdeBootstrapInstanceLambda
    DependsOn:
      - EksWorkshopIdeLambdaExecutionRole
    Properties:
      ServiceToken:
        Fn::GetAtt:
          - EksWorkshopIdeBootstrapInstanceLambdaFunction
          - Arn
      REGION:
        Ref: AWS::Region
      InstanceId:
        Ref: EksWorkshopIdeInstance
      SsmDocument:
        Ref: EksWorkshopIdeSSMDocument
  EksWorkshopIdeBootstrapInstanceLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-ide-bootstrap-instance
      Handler: index.lambda_handler
      Role:
        Fn::GetAtt:
          - EksWorkshopIdeLambdaExecutionRole
          - Arn
      Runtime: python3.12
      Environment:
        Variables:
          DiskSize:
            Ref: InstanceVolumeSize
      MemorySize: 256
      Timeout: "900"
      Code:
        ZipFile: |
          from __future__ import print_function
          import boto3
          import json
          import os
          import time
          import traceback
          import cfnresponse
          import logging
          logger = logging.getLogger(__name__)

          def lambda_handler(event, context):
              print('event: {}'.format(event))
              print('context: {}'.format(context))
              responseData = {}

              status = cfnresponse.SUCCESS
              
              if event['RequestType'] == 'Delete':
                  responseData = {'Success': 'Custom Resource removed'}
                  cfnresponse.send(event, context, status, responseData, 'CustomResourcePhysicalID')              
              else:
                  try:
                      # Open AWS clients
                      #ec2 = boto3.client('ec2')
                      ssm = boto3.client('ssm')

                      instance_id = event['ResourceProperties']['InstanceId']

                      ssm_document = event['ResourceProperties']['SsmDocument']

                      print('Sending SSM command...')

                      response = ssm.send_command(
                        InstanceIds=[instance_id],
                        DocumentName=ssm_document)

                      command_id = response['Command']['CommandId']

                      waiter = ssm.get_waiter('command_executed')

                      waiter.wait(
                        CommandId=command_id,
                        InstanceId=instance_id,
                        WaiterConfig={
                          'Delay': 10,
                          'MaxAttempts': 60
                        }
                      )

                      responseData = {'Success': 'Started bootstrapping for instance: '+instance_id}
                      cfnresponse.send(event, context, status, responseData, 'CustomResourcePhysicalID')
                  except Exception as e:
                      status = cfnresponse.FAILED
                      print(traceback.format_exc())
                      responseData = {'Error': traceback.format_exc(e)}
                  finally:
                      cfnresponse.send(event, context, status, responseData, 'CustomResourcePhysicalID')
  EksWorkshopIdeSSMDocument:
    Type: AWS::SSM::Document
    Properties:
      Name: !Sub ${AWS::StackName}-ide-ssm-document
      DocumentType: Command
      DocumentFormat: YAML
      Content:
        schemaVersion: "2.2"
        description: Bootstrap code-server Instance
        mainSteps:
          - action: aws:runShellScript
            name: EksWorkshopIdebootstrap
            inputs:
              runCommand:
                - !Sub |
                  set -e

                  echo ">>> Install required packages"
                  yum update -y
                  yum install -y git tar gzip vim nodejs npm make gcc g++ argon2

                  # source <(curl -fsSL https://raw.githubusercontent.com/${RepositoryOwner}/${RepositoryName}/${RepositoryRef}/hack/lib/common-env.sh)

                  echo ">>> Install Caddy Web Server"
                  dnf copr enable -y @caddy/caddy epel-9-x86_64
                  dnf install -y caddy
                  systemctl enable --now caddy

                  tee /etc/caddy/Caddyfile <<EOF
                  http://${EksWorkshopIdeCloudFrontDistribution.DomainName} {
                    reverse_proxy 127.0.0.1:8889
                  }
                  EOF

                  systemctl restart caddy

                  echo ">>> Add a Custom Prompt profile"
                  tee /etc/profile.d/custom_prompt.sh <<EOF
                  #!/bin/sh

                  export PROMPT_COMMAND='export PS1="\u:\w:$ "'
                  EOF

                  export AWS_REGION="${AWS::Region}"
                  export REPOSITORY_OWNER="${RepositoryOwner}"
                  export REPOSITORY_NAME="${RepositoryName}"
                  export REPOSITORY_REF="${RepositoryRef}"
                  export RESOURCES_PRECREATED="${ResourcesPrecreated}"

                  echo ">>> Execute the 'eks-edu' installer"
                  export RAW_REPOSITORY_URL="https://raw.githubusercontent.com/$REPOSITORY_OWNER/$REPOSITORY_NAME/$REPOSITORY_REF"
                  curl -fsSL $RAW_REPOSITORY_URL/00_Setup/scripts/installer.sh | bash

                  echo ">>> Install code-server"
                  cat <<"EOT" | sudo -E -H -u ec2-user bash
                  set -e

                  mkdir -p ~/environment

                  codeServer=$(dnf list installed code-server | wc -l)
                  if [ "$codeServer" -eq "0" ]; then
                    curl -Ls -o /tmp/coder.rpm https://github.com/coder/code-server/releases/download/v${CodeServerVersion}/code-server-${CodeServerVersion}-amd64.rpm
                    sudo rpm -U "/tmp/coder.rpm"

                    sudo systemctl enable --now code-server@ec2-user
                  fi

                  PASSWORD_SECRET_VALUE=$(aws secretsmanager get-secret-value --secret-id "${EksWorkshopIdePassword.Id}" --query 'SecretString' --output text)
                  IDE_PASSWORD=$(echo "$PASSWORD_SECRET_VALUE" | jq -r '.password')
                  HASHED_PASSWORD=$(echo -n "$IDE_PASSWORD" | argon2 saltItWithSalt -l 32 -e)

                  mkdir -p ~/.config/code-server
                  touch ~/.config/code-server/config.yaml
                  tee ~/.config/code-server/config.yaml <<EOF
                  cert: false
                  auth: password
                  hashed-password: "$HASHED_PASSWORD"
                  bind-addr: 127.0.0.1:8889
                  EOF

                  mkdir -p ~/.local/share/code-server/User
                  touch ~/.local/share/code-server/User/settings.json
                  tee ~/.local/share/code-server/User/settings.json <<EOF
                  {
                    "extensions.autoUpdate": false,
                    "extensions.autoCheckUpdates": false,
                    "security.workspace.trust.enabled": false,
                    "task.allowAutomaticTasks": "on",
                    "telemetry.telemetryLevel": "off",
                    "workbench.startupEditor": "terminal",
                    "workbench.iconTheme": "material-icon-theme",
                  }
                  EOF

                  mkdir -p ~/environment/.vscode
                  tee ~/environment/.vscode/settings.json <<EOF
                  {
                    # "files.exclude": {
                    #   "**/.*": true
                    # },
                    "files.associations": {
                      "*.yaml.template": "yaml"
                    }
                  }
                  EOF

                  echo '{ "query": { "folder": "/home/ec2-user/environment" } }' > ~/.local/share/code-server/coder.json

                  curl -fsSL $RAW_REPOSITORY_URL/00_Setup/scripts/setup.sh | bash

                  curl -fsSL $RAW_REPOSITORY_URL/00_Setup/scripts/banner.sh | bash

                  code-server --install-extension ms-azuretools.vscode-docker --force
                  code-server --install-extension ms-kubernetes-tools.vscode-kubernetes-tools --force
                  code-server --install-extension redhat.vscode-yaml --force
                  code-server --install-extension pkief.material-icon-theme --force

                  cd ~/environment
                  git clone --depth=1 --single-branch --branch=$REPOSITORY_REF https://github.com/${RepositoryOwner}/${RepositoryName}.git
                  
                  EOT

                  systemctl restart code-server@ec2-user
  EksWorkshopIdeRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${AWS::StackName}-ide-role
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
                - ssm.amazonaws.com
            Action:
              - sts:AssumeRole
      Policies:
        - PolicyName: !Sub ${AWS::StackName}-ide-password
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - secretsmanager:GetResourcePolicy
                  - secretsmanager:GetSecretValue
                  - secretsmanager:DescribeSecret
                  - secretsmanager:ListSecretVersionIds
                Resource:
                  - !Ref EksWorkshopIdePassword
              - Effect: Allow
                Action:
                  - secretsmanager:ListSecrets
                  - eks:*
                Resource: "*"
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
        - arn:aws:iam::aws:policy/AWSCloudFormationFullAccess
        - arn:aws:iam::aws:policy/AmazonEC2FullAccess
        - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryFullAccess
        - arn:aws:iam::aws:policy/AmazonS3FullAccess
        - arn:aws:iam::aws:policy/AmazonVPCFullAccess
        - arn:aws:iam::aws:policy/CloudWatchFullAccess
        - arn:aws:iam::aws:policy/IAMFullAccess        
      Path: "/"
  EksWorkshopBasePolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      Roles:
        - !Ref EksWorkshopIdeRole
      ManagedPolicyName: !Sub ${AWS::StackName}-base
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              
              - ec2:CreateLaunchTemplate
              - ec2:DeleteLaunchTemplate
              - sts:GetCallerIdentity
            Resource: ["*"]
          - Effect: Allow
            Action:
              - cloudformation:CreateStack
            Resource:
              - !Sub arn:aws:cloudformation:${AWS::Region}:${AWS::AccountId}:stack/eksctl-eks-workshop*
            Condition:
              "Null":
                cloudformation:RoleARN: "true"
          - Effect: Allow
            Action:
              - cloudformation:DeleteStack
            Resource:
              - !Sub arn:aws:cloudformation:${AWS::Region}:${AWS::AccountId}:stack/eksctl-eks-workshop*
            Condition:
              "Null":
                cloudformation:RoleARN: "true"
          - Effect: Allow
            Action:
              - cloudformation:Get*
              - cloudformation:Describe*
              - cloudformation:List*
              - cloudformation:TagResource
            Resource: ["*"]
          - Effect: Allow
            Action:
              - autoscaling:UpdateAutoScalingGroup
            Resource: ["*"]
            Condition:
              StringLike:
                aws:ResourceTag/eks:cluster-name:
                  - eks-workshop
          - Effect: Allow
            Action:
              - autoscaling:Get*
              - autoscaling:Describe*
            Resource: ["*"]
          - Effect: Allow
            Action:
              - ecr-public:GetAuthorizationToken
              - sts:GetServiceBearerToken
            Resource: ["*"]
          - Effect: Allow
            Action:
              - kms:CreateKey
              - kms:TagResource
              - kms:ScheduleKeyDeletion
              - kms:CreateGrant
              - kms:EnableKeyRotation
              - kms:GetKeyPolicy
              - kms:GetKeyRotationStatus
              - kms:ListResourceTags
              - kms:PutKeyPolicy
            Resource: ["*"]
          - Effect: Allow
            Action:
              - kms:Decrypt
              - kms:DescribeKey
              - kms:EnableKeyRotation
              - kms:Encrypt
              - kms:GenerateDataKey
              - kms:GenerateDataKeyWithoutPlaintext
            Resource: ["*"]
            Condition:
              StringLike:
                kms:RequestAlias: ["alias/eks-workshop*", "alias/eks/eks-workshop*"]
          - Effect: Allow
            Action:
              - kms:CreateAlias
              - kms:DeleteAlias
            Resource:
              - !Sub arn:aws:kms:${AWS::Region}:${AWS::AccountId}:alias/eks-workshop*
              - !Sub arn:aws:kms:${AWS::Region}:${AWS::AccountId}:alias/eks/eks-workshop*
              - !Sub arn:aws:kms:${AWS::Region}:${AWS::AccountId}:key/*
          - Effect: Allow
            Action:
              - kms:List*
              - kms:Get*
              - kms:Describe*
            Resource: ["*"]
  EksWorkshopIdeInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      InstanceProfileName: !Sub ${AWS::StackName}-ide-instance-profile
      Path: "/"
      Roles:
        - Ref: EksWorkshopIdeRole
  EksWorkshopIdeInstance:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !Ref AmiParameterStoreName
      InstanceType: !Ref CodeServerInstanceType
      BlockDeviceMappings:
        - Ebs:
            VolumeSize: !Ref InstanceVolumeSize
            VolumeType: gp3
            DeleteOnTermination: true
            Encrypted: true
          DeviceName: /dev/xvda
      SubnetId: !Ref PublicSubnet
      SecurityGroupIds:
        - !Ref SecurityGroup
      IamInstanceProfile: !Ref EksWorkshopIdeInstanceProfile
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName}-ide
        - Key: type
          Value: eksworkshop-ide
  EksWorkshopIdePassword:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: !Sub ${AWS::StackName}-password
      GenerateSecretString:
        ExcludeCharacters: "\"@/\\"
        ExcludePunctuation: true
        GenerateStringKey: password
        IncludeSpace: false
        PasswordLength: 32
        SecretStringTemplate: '{"password":""}'
    UpdateReplacePolicy: Delete
    DeletionPolicy: Delete
  EksWorkshopIdeCachePolicy:
    Type: AWS::CloudFront::CachePolicy
    Properties:
      CachePolicyConfig:
        DefaultTTL: 86400
        MaxTTL: 31536000
        MinTTL: 1
        Name: !Ref AWS::StackName
        ParametersInCacheKeyAndForwardedToOrigin:
          CookiesConfig:
            CookieBehavior: all
          EnableAcceptEncodingGzip: False
          HeadersConfig:
            HeaderBehavior: whitelist
            Headers:
              - Accept-Charset
              - Authorization
              - Origin
              - Accept
              - Referer
              - Host
              - Accept-Language
              - Accept-Encoding
              - Accept-Datetime
          QueryStringsConfig:
            QueryStringBehavior: all
  # EksWorkshopIdeCloudFrontVpcOrigin:
  #   Type: AWS::CloudFront::VpcOrigin
  #   Properties:
  #     VpcOriginEndpointConfig:
  #          Arn: !Sub arn:aws:ec2:${AWS::Region}:${AWS::AccountId}:instance/${EksWorkshopIdeInstance.InstanceId}
  #          HTTPPort: 80
  #          Name: !Sub ${AWS::StackName}-ide-ec2-origin
  #          OriginProtocolPolicy: http-only
  #   DependsOn:
  #     - EksWorkshopIdeInstance
  EksWorkshopIdeCloudFrontDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Comment: !Sub ${AWS::StackName}
        Enabled: True
        HttpVersion: http2
        CacheBehaviors:
          - AllowedMethods:
              - GET
              - HEAD
              - OPTIONS
              - PUT
              - PATCH
              - POST
              - DELETE
            CachePolicyId: 4135ea2d-6df8-44a3-9df3-4b5a84be39ad # CachingDisabled
            Compress: False
            OriginRequestPolicyId: 216adef6-5c7f-47e4-b989-5492eafa07d3 # AllViewer
            TargetOriginId: !Sub ${AWS::StackName}-ide-ec2-origin
            ViewerProtocolPolicy: allow-all
            PathPattern: "/proxy/*"
        DefaultCacheBehavior:
          AllowedMethods:
            - GET
            - HEAD
            - OPTIONS
            - PUT
            - PATCH
            - POST
            - DELETE
          CachePolicyId: !Ref EksWorkshopIdeCachePolicy
          OriginRequestPolicyId: 216adef6-5c7f-47e4-b989-5492eafa07d3 # AllViewer
          TargetOriginId: !Sub ${AWS::StackName}-ide-ec2-origin
          ViewerProtocolPolicy: allow-all
        Origins:
          - DomainName: !GetAtt EksWorkshopIdeInstance.PublicDnsName
            Id: !Sub ${AWS::StackName}-ide-ec2-origin
            CustomOriginConfig:
              OriginProtocolPolicy: http-only
        # Origins:
        #   - Id: !Sub ${AWS::StackName}-ide-ec2-origin
        #     DomainName: !GetAtt EksWorkshopIdeInstance.PrivateDnsName
        #     VpcOriginConfig:
        #       VpcOriginId: !GetAtt EksWorkshopIdeCloudFrontVpcOrigin.Id
Outputs:
  IdeUrl:
    Value: !Sub https://${EksWorkshopIdeCloudFrontDistribution.DomainName}
  IdePasswordSecret:
    Value: !Sub
      - https://${AWS::Region}.console.aws.amazon.com/secretsmanager/secret?name=${SecretName}
      - SecretName: !Sub ${AWS::StackName}-password
  IdePasswordSecretName:
    Value: !Sub ${AWS::StackName}-password
  IdeRole:
    Value: !Sub ${EksWorkshopIdeRole.Arn}
